{"version":3,"file":"odo-share.min.js","sources":["../src/utils.js","../src/services/facebook.js","../src/services/twitter.js","../src/services/googleplus.js","../src/services/tumblr.js","../src/services/linkedin.js","../src/services/email.js","../src/share.js"],"sourcesContent":["/**\n * Implodes an array into a comma-separated list, or returns the input\n * if the input is not an array.\n *\n * @param {string|array} input - The string or array to implode.\n * @return {string}\n */\nexport function implode(input) {\n  if (typeof input !== 'string') {\n    input = input.join(); // eslint-disable-line no-param-reassign\n  }\n\n  return encodeURIComponent(input);\n}\n\n/**\n * Implodes an array or string as well as strips a token from\n * the string or each item in the array. This is uesful for removing hastags or\n * @'s.\n *\n * @param {string|array} input - The string or array to implode.\n * @param {string} stripToken - The token to strip.\n * @return {string}\n */\nexport function implodeAndStrip(input, stripToken) {\n  if (typeof input === 'string') {\n    input = input.replace(', ', ',').split(','); // eslint-disable-line no-param-reassign\n  }\n\n  input = input.map(item => item.replace(stripToken, '')).join(); // eslint-disable-line no-param-reassign\n\n  return encodeURIComponent(input);\n}\n","/**\n * Facebook\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - [u=window.location.href] - URL of the page to share\n *\n * @see {@link https://dev.twitter.com/web/tweet-button#properties}\n */\nexport default {\n  BASE: 'http://www.facebook.com/sharer.php',\n  params: {\n    u: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","import { implodeAndStrip } from '../utils';\n\n/**\n * Twitter\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - [url=window.location.href] - URL of the page to share\n *  - via - Screen name of the user to attribute the\n *    Tweet to\n *  - text - Default Tweet text\n *  - related - Related accounts\n *  - [lang='en'] - The language for the Tweet Button\n *  - counturl - URL to which your shared URL resolves\n *  - hashtags - Comma separated hashtags appended to tweet text\n *\n * @see {@link https://dev.twitter.com/web/tweet-button#properties}\n */\nexport default {\n  BASE: 'https://twitter.com/intent/tweet',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n    via: {\n      friendly: 'via',\n      parse(input) {\n        return encodeURIComponent(input.replace('@', ''));\n      },\n    },\n    text: {\n      friendly: 'text',\n      parse: encodeURIComponent,\n    },\n    related: {\n      friendly: 'recommend',\n      parse(input) {\n        return implodeAndStrip(input, '@');\n      },\n    },\n    lang: {\n      friendly: 'language',\n      parse: encodeURIComponent,\n      default: 'en',\n    },\n    counturl: {\n      friendly: 'resolvesTo',\n      parse: encodeURIComponent,\n    },\n    hashtags: {\n      friendly: 'hashtags',\n      parse(input) {\n        return implodeAndStrip(input, '#');\n      },\n    },\n  },\n};\n","/**\n * Google Plus\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - url - URL of the page to share\n */\nexport default {\n  BASE: 'https://plus.google.com/share',\n  features: 'width=600,height=460,menubar=no,location=no,status=no',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","/**\n * Tumblr\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - to\n *  - cc\n *  - bcc\n *  - subject\n *  - body\n */\nexport default {\n  BASE: 'https://www.tumblr.com/widgets/share/tool',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURI,\n      default: window.location.href,\n    },\n    title: {\n      friendly: 'title',\n      parse: encodeURI,\n      default: document.title,\n    },\n    description: {\n      friendly: 'description',\n      parse: encodeURI,\n    },\n  },\n};\n","/**\n * LinkedIn\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - mini\n *  - ro\n *  - title - Title of the page to share\n *  - url - URL of the page to share\n *\n * @see {@link https://www.linkedin.com/static?key=browser_bookmarklet}\n */\nexport default {\n  BASE: 'http://www.linkedin.com/shareArticle',\n  features: 'width=520,height=570,toolbar=0,location=0,status=0,scrollbars=yes',\n  params: {\n    mini: {\n      friendly: 'mini',\n      default: true,\n    },\n    ro: {\n      friendly: 'ro',\n      default: false,\n    },\n    title: {\n      friendly: 'title',\n      parse: encodeURIComponent,\n      default: document.title,\n    },\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","import { implode } from '../utils';\n\n/**\n * LinkedIn\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - to\n *  - cc\n *  - bcc\n *  - subject\n *  - body\n */\nexport default {\n  BASE: 'mailto:',\n  params: {\n    to: {\n      friendly: 'to',\n      parse: implode,\n    },\n    cc: {\n      friendly: 'cc',\n      parse: implode,\n    },\n    bcc: {\n      friendly: 'bcc',\n      parse: implode,\n    },\n    subject: {\n      friendly: 'subject',\n      parse: encodeURIComponent,\n      default: document.title,\n    },\n    body: {\n      friendly: 'body',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","/**\n * Share component.\n *\n * @author Nathan Buchar <nathan.buchar@odopod.com>\n */\n\nimport * as services from './services';\n\n/**\n * The window name for all share windows spawned by Share\n */\nconst WINDOW_NAME = 'ShareWindow';\nconst noop = () => {};\n\nclass Share {\n  /**\n   * Prepares share components within the DOM.\n   *\n   * @constructor\n   */\n  constructor() {\n    this.ClassName = {\n      BASE: 'odo-share',\n    };\n\n    this.services = services;\n\n    // An array of share data objects. These objects may contain information\n    // regarding the root element, and beforeSend and afterSend functionality.\n    this.shares = [];\n\n    this._registerShareButtons();\n  }\n\n  /**\n   * This registers all Share components that are\n   * rendered to the DOM on page load. This will not prepare Share components\n   * that are added to the DOM dynamically. These must be registered using the\n   * public `add` method (@see add).\n   *\n   * @see _.add\n   */\n  _registerShareButtons() {\n    const selector = '.' + this.ClassName.BASE;\n    const shareElements = Array.from(document.querySelectorAll(selector));\n\n    // Pass an array of objects to the `add` method. These objects simply contain\n    // an `element` key that references the DOM element.\n    this.add(shareElements.map(element => ({ element })));\n  }\n\n  /**\n   * Normalize an option.\n   * @param {Object|Element} option Element or option object.\n   * @return {?Object}\n   */\n  _normalizeOption(option) {\n    if (option && option.nodeType === 1) {\n      // A DOM element was passed in.\n      return { element: option };\n    } else if (option && option.element) {\n      // A data object was passed in.\n      return option;\n    }\n\n    return null;\n  }\n\n  /**\n   * Normalize the options to an array of objects to add.\n   * @param {Element|Array|Object} options An array of option objects, an option\n   *     object, or an element.\n   * @return {Array.<Object>} An array of new share data.\n   */\n  _normalizeOptions(options) {\n    let items;\n\n    if (Array.isArray(options)) {\n      items = options.map(this._normalizeOption, this);\n    } else {\n      items = [this._normalizeOption(options)];\n    }\n\n    return items.filter(item => !!item);\n  }\n\n  /**\n   * Iterates through each element passed into the method, prepares it and\n   * pushes the completed data object to the `shares` array.\n   *\n   * @param {Element|Array|Object} options An array of option objects, an option\n   *     object, or an element.\n   */\n  add(options) {\n    const items = this._normalizeOptions(options);\n    const newShares = [];\n\n    items.forEach((data) => {\n      data.listener = (evt) => {\n        evt.preventDefault();\n        this.share(data);\n      };\n\n      data.element.addEventListener('click', data.listener);\n\n      this.shares.push(data);\n      newShares.push(data);\n    });\n\n    return newShares;\n  }\n\n  /**\n   * Performs the share operation. This will call the `before` method, reapply\n   * any modified input, open the window, then perform the `after` functionality.\n   *\n   * @param {object} input - The input data for the share as defined by the user.\n   * @param {object} outout - The output data for the share as generated by the\n   *   Share internals, such as the query  string, window properties, and\n   *   parsed paramaters.\n   * @param {object} service - The service configuration. @see ./services\n   */\n  _performShare(input, output, service) {\n    const transformedData = input.before.call(this, output);\n\n    const action = (arg) => {\n      let windowObject;\n      let options;\n      let parsedOptions = output;\n\n      // Reapply new data if applicable.\n      if (arg !== undefined && arg !== null) {\n        if (arg === false) {\n          return;\n        } else if ('data' in arg) {\n          options = Object.assign(input, arg);\n        } else {\n          options = Object.assign(input, { data: arg });\n        }\n\n        parsedOptions = Share._parseInput(options, service);\n      }\n\n      if (service === this.services.email) {\n        // Prevent opening empty window if sharing via email.\n        this._navigate(parsedOptions.url);\n      } else {\n        // Open the share window.\n        windowObject = this._open(parsedOptions.url, parsedOptions.name, service.Features);\n      }\n\n      // Call the `after` functionality.\n      input.after.call(this, parsedOptions, windowObject);\n    };\n\n    // Return a promise from the `before` method to do something async.\n    if (transformedData && transformedData.then) {\n      transformedData.then(action);\n    } else {\n      action(transformedData);\n    }\n  }\n\n  /**\n   * Gets the service configuration from the given string.\n   *\n   * @param {object} data - Share input data.\n   * @return {object|undefined} - The service configuration, or void if no service was\n   *   defined.\n   */\n  _getService(data) {\n    const service = data.service || (data.element && data.element.getAttribute('data-service'));\n\n    if (this.services[service]) {\n      return this.services[service];\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Parses the given input and exports the technical output based\n   * on the service schema. This includes items such as the query string, window\n   * data, and params.\n   *\n   * @param {object} input - Share input data.\n   * @param {object} service - The service configuration.\n   * @return {object} output - The parsed output.\n   * @see _parseparamsFromInput\n   * @see _getQueryString\n   * @see _constructWindowData\n   */\n  static _parseInput(input, service) {\n    const params = Share._parseParamsFromInput(input, service);\n    const queryString = Share._getQueryString(params);\n\n    return {\n      params,\n      queryString,\n      url: service.BASE + queryString,\n      name: WINDOW_NAME,\n    };\n  }\n\n  /**\n   * Parse the parameters from the given input and service schema. Defining a\n   * service schema allows us to always use \"url\" for all our share buttons,\n   * regardless of their service, as long as the proper key is defined in its\n   * respective parameter schema.\n   *\n   * If a parameter has a `parse` method within the object, this method will be\n   * called and will pass in the input value for that particular parameter. This\n   * allows us to customize how a parameter is parsed on a per-parameter and per-\n   * service basis without adding needless code within conditional blocks below.\n   *\n   * Order of priorities:\n   *   input value > `data` attributes (if applicable) > default > `void`\n   *\n   * @param {object} input - Share input data.\n   * @param {object} service - The service configuration.\n   * @return {object} obj - The parsed parameters.\n   */\n  static _parseParamsFromInput(input, service) {\n    const elementData = input.element ? input.element.dataset : {};\n    const data = input.data;\n    const obj = {};\n\n    // Iterate through each valid paramater for the given service.\n    Object.keys(service.params).forEach((param) => {\n      const config = service.params[param];\n      const friendly = config.friendly;\n      let value = null;\n\n      // Check if the parameter was defined when `share` was called.\n      if (friendly in data) {\n        value = data[friendly];\n      } else if (friendly in elementData) {\n        // Check if the parameter is defined as a data attribute on the element.\n        value = elementData[friendly];\n      } else if (config.default) {\n        // The param was not defined; Check for default values.\n        value = config.default;\n      }\n\n      if (value) {\n        // Parse the parameter and set its value.\n        obj[param] = (config.parse ? config.parse(value) : value).toString();\n      }\n    });\n\n    return obj;\n  }\n\n  /**\n   * Assembles the query string from an enumerated param object.\n   *\n   * For example { foo: 'bar', baz: 'qux' } => \"?foo=bar&baz=qux\"\n   *\n   * @param {object} data - Parameter data.\n   * @return {string} query - The finalized query string.\n   */\n  static _getQueryString(data) {\n    let base = '';\n\n    // The mailto: format requires the `to` to be first, before the `?`.\n    if (data.to) {\n      base = data.to;\n      delete data.to;\n    }\n\n    const pairs = Object.keys(data).map(param => `${param}=${data[param]}`);\n    return `${base}?${pairs.join('&')}`;\n  }\n\n  /* istanbul ignore next */\n  /**\n   * Opens a new browser window.\n   *\n   * @param {string} url - The URL to be loaded in the newly opened window.\n   * @param {string} windowName - A string name for the new window. The name\n   *   should not contain any whitespace characters. NOTE that windowName does not\n   *   specify the title of the new window. If a window with the same name already\n   *   exists, then the URL is loaded into the existing window.\n   * @return {object|null} - A reference to the newly created window. If the call\n   *   failed, it will be null. The reference can be used to access properties and\n   *   methods of the new window provided it complies with Same origin policy\n   *   security requirements.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open}\n   */\n  _open(url, windowName, windowFeatures = '') {\n    return window.open(url, windowName, windowFeatures);\n  }\n\n  /* istanbul ignore next */\n  /**\n   * Navigate to a new location within the same tab. This is used to open the\n   * user's default email app.\n   * @param {string} url mailto url.\n   */\n  _navigate(url) {\n    window.location.assign(url);\n  }\n\n  /**\n   * Initiate sharing. Extend the default options, fetch the service,\n   * parse the input, then perform the share.\n   *\n   * @example\n   *   Share.share({\n   *     service: 'twitter',\n   *     data: {\n   *       url: 'http://odopod.com/'\n   *       text: 'Check this out!',\n   *       via: 'Nurun',\n   *       hashtags: ['rad', 'odoshare']\n   *     }\n   *   });\n   *\n   * @param {object} options - Share options.\n   * @return {boolean} - Will return true if the share was successfull.\n   */\n  share(options) {\n    const opts = Object.assign({}, Share.Options, options);\n\n    // Fetch the service config from the string provided.\n    const service = this._getService(opts);\n\n    // The service could not be determined or was not defined; Exit early.\n    if (!service) {\n      return false;\n    }\n\n    // Parse the output (params, query string, etc) from the data provided.\n    const output = Share._parseInput(opts, service);\n\n    // Perform the share operation.\n    this._performShare(opts, output, service);\n\n    return true;\n  }\n\n  /**\n   * Disposes of all references and event listeners to the share\n   * button. To reverse this, you must call `.add` and pass in the element and\n   * options again.\n   *\n   * @param {Element} element - A reference to the share button's element.\n   * @return {number|undefined} - If a share button was disposed, this will return `1`,\n   *   (the length of the number of items disposed of), otherwise this will not\n   *   return.\n   */\n  dispose(element) {\n    for (let i = 0; i < this.shares.length; i++) {\n      const data = this.shares[i];\n      if (data.element === element) {\n        data.element.removeEventListener('click', data.listener);\n        return this.shares.splice(i, 1).length;\n      }\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Default share input options. These may be overwritten by the user.\n */\nShare.Options = {\n  data: {},\n  before: noop,\n  after: noop,\n};\n\nexport default new Share();\n"],"names":["implode","input","join","encodeURIComponent","implodeAndStrip","stripToken","replace","split","map","item","window","location","href","encodeURI","document","title","noop","Share","ClassName","services","shares","_registerShareButtons","selector","this","BASE","shareElements","Array","from","querySelectorAll","add","element","_normalizeOption","option","nodeType","_normalizeOptions","options","isArray","filter","newShares","forEach","data","listener","evt","preventDefault","share","addEventListener","push","_performShare","output","service","transformedData","before","call","action","arg","windowObject","parsedOptions","undefined","Object","assign","_parseInput","_this2","email","_navigate","url","_open","name","Features","after","then","_getService","getAttribute","params","_parseParamsFromInput","queryString","_getQueryString","elementData","dataset","obj","keys","param","config","friendly","value","default","parse","toString","base","to","windowName","windowFeatures","open","opts","Options","dispose","i","length","removeEventListener","splice"],"mappings":"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"}