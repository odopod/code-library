{"version":3,"file":"odo-expandable.min.js","sources":["../src/settings.js","../src/expandable-item.js","../src/expandable-group.js","../src/expandable.js"],"sourcesContent":["export default {\n  ClassName: {\n    TRIGGER_OPEN: 'odo-expandable__trigger--open',\n    TARGET_OPEN: 'odo-expandable__target--open',\n  },\n  Attribute: {\n    TRIGGER: 'data-expandable-trigger',\n    TARGET: 'data-expandable-target',\n    GROUP: 'data-expandable-group',\n  },\n  Defaults: {\n    groupedItem: false,\n  },\n};\n","/**\n * @fileoverview An basic, expandable component that has both a trigger\n * and a target to open.\n *\n * @author Matt Zaso\n */\nimport Settings from './settings';\n\nclass ExpandableItem {\n  constructor(id, options = {}) {\n    /** @type {string} */\n    this.id = id;\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Settings.Defaults, options);\n\n    /** @type {Element} */\n    this._trigger = document.body.querySelector(`[${Settings.Attribute.TRIGGER}=\"${id}\"]`);\n\n    /** @type {Element} */\n    this._target = document.body.querySelector(`[${Settings.Attribute.TARGET}=\"${id}\"]`);\n\n    this._setA11yAttributes();\n\n    if (!this.options.groupedItem) {\n      this._onTriggerClick = this._triggerClickHandler.bind(this);\n      document.body.addEventListener('click', this._onTriggerClick);\n    }\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _triggerClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest === this._trigger) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Sets the appropriate ARIA attributes for a11y.\n   * @private\n   */\n  _setA11yAttributes() {\n    const elementId = `expandable-${this.id}`;\n\n    this._trigger.setAttribute('aria-describedby', elementId);\n    this._target.setAttribute('id', elementId);\n    this._trigger.setAttribute('aria-expanded', this.isOpen.toString());\n    this._trigger.setAttribute('aria-controls', elementId);\n    this._target.setAttribute('aria-labelledby', elementId);\n    this._target.setAttribute('aria-hidden', (!this.isOpen).toString());\n  }\n\n  /**\n   * Removes the ARIA attributes assigned on instantiation.\n   * @private\n   */\n  _removeA11yAttributes() {\n    this._trigger.removeAttribute('aria-describedby');\n    this._target.removeAttribute('id');\n    this._trigger.removeAttribute('aria-expanded');\n    this._target.removeAttribute('aria-labelledby');\n    this._target.removeAttribute('aria-hidden');\n  }\n\n  /**\n   * Toggles the expandable's state (open/closed).\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Opens the expandable.\n   */\n  open() {\n    this._target.classList.add(Settings.ClassName.TARGET_OPEN);\n    this._trigger.classList.add(Settings.ClassName.TRIGGER_OPEN);\n    this._trigger.setAttribute('aria-expanded', 'true');\n    this._target.setAttribute('aria-hidden', 'false');\n  }\n\n  /**\n   * Closes the expandable.\n   */\n  close() {\n    this._target.classList.remove(Settings.ClassName.TARGET_OPEN);\n    this._trigger.classList.remove(Settings.ClassName.TRIGGER_OPEN);\n    this._trigger.setAttribute('aria-expanded', 'false');\n    this._target.setAttribute('aria-hidden', 'true');\n  }\n\n  get isOpen() {\n    return this._target.classList.contains(Settings.ClassName.TARGET_OPEN);\n  }\n\n  /**\n   * Dispose this instance and its handlers.\n   */\n  dispose() {\n    if (!this.options.groupedItem) {\n      document.body.removeEventListener('click', this._onTriggerClick);\n    }\n\n    this._removeA11yAttributes();\n  }\n\n  /**\n   * Instantiates a single instance of the Expandable Item.\n   *\n   * @param {Element} element Either a trigger or target.\n   * @return {ExpandableItem} the instance of the Expandable Item.\n   * @public\n   */\n  static initialize(element) {\n    const triggerId = element.getAttribute(Settings.Attribute.TRIGGER);\n    const targetId = element.getAttribute(Settings.Attribute.TARGET);\n    const id = targetId || triggerId;\n\n    return new ExpandableItem(id);\n  }\n}\n\nObject.assign(ExpandableItem, Settings);\n\nexport default ExpandableItem;\n","/**\n * @fileoverview A wrapper for multiple Expandable elements that will\n * allow them to operate coherently in an accordion type fashion.\n *\n * @author Matt Zaso\n */\nimport Settings from './settings';\nimport ExpandableItem from './expandable-item';\n\nclass ExpandableGroup {\n  constructor(elements) {\n    /** @type {Array.<!Element>} */\n    this._elements = elements;\n\n    /** @type {Array.<!ExpandableItem>} */\n    this._expandables = elements.map(trigger => new ExpandableItem(\n      trigger.getAttribute(Settings.Attribute.TRIGGER),\n      { groupedItem: true },\n    ));\n\n    this._onClick = this._onClickHandler.bind(this);\n    document.body.addEventListener('click', this._onClick);\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {MouseEvent} evt Event object.\n   * @private\n   */\n  _onClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (this._elements.includes(closest)) {\n      this._toggleGroupVisibility(closest.getAttribute(Settings.Attribute.TRIGGER));\n    }\n  }\n\n  /**\n   * Will iterate over all grouped items and toggle the selected one while collapsing all others.\n   * @param {number} selectedId The ID of the selected target to expand.\n   * @private\n   */\n  _toggleGroupVisibility(selectedId) {\n    this._expandables.forEach((expandable) => {\n      if (expandable.id === selectedId) {\n        expandable.toggle();\n      } else {\n        expandable.close();\n      }\n    });\n  }\n\n  /**\n   * Dispose this instance and its handlers. Will also dispose all child\n   * instances.\n   * @public\n   */\n  dispose() {\n    document.body.removeEventListener('click', this._onTriggerClick);\n    this._expandables.forEach(item => item.dispose());\n  }\n\n  /**\n   * Instantiates a single instance of the Expandable Group.\n   *\n   * @param {Array.<Element>} elements An array of the elements in the group.\n   * @return {ExpandableItem} the instance of the Expandable Item.\n   * @public\n   */\n  static initialize(elements) {\n    return new ExpandableGroup(elements);\n  }\n}\n\nObject.assign(ExpandableGroup, Settings);\n\nexport default ExpandableGroup;\n","import Settings from './settings';\nimport ExpandableGroup from './expandable-group';\nimport ExpandableItem from './expandable-item';\n\n/**\n * Instantiates all instances of the expandable. Groups are instantiated separate from\n * Expandables and require different parameters. This helper chunks out and groups the\n * grouped expandables before instantiating all of them.\n *\n * @return {Array.<Expandable, ExpandableGroup>} all instances of both types.\n * @public\n */\nexport function initializeAll() {\n  const elements = Array.from(document.querySelectorAll(`[${Settings.Attribute.TRIGGER}]`));\n\n  const single = [];\n  const groups = [];\n  const groupIds = [];\n\n  elements.forEach((item) => {\n    const groupId = item.getAttribute(Settings.Attribute.GROUP);\n    if (groupId) {\n      if (groupIds.includes(groupId)) {\n        groups.push(elements.filter(el => el.getAttribute(Settings.Attribute.GROUP) === groupId));\n        groupIds.push(groupId);\n      }\n    } else {\n      single.push(item);\n    }\n  });\n\n  const singleInstances =\n    single.map(trigger => new ExpandableItem(trigger.getAttribute(Settings.Attribute.TRIGGER)));\n  const groupInstances = groups.map(grouping => new ExpandableGroup(grouping));\n\n  return singleInstances.concat(groupInstances);\n}\n\nexport { default as ExpandableItem } from './expandable-item';\nexport { default as ExpandableGroup } from './expandable-group';\n"],"names":["ExpandableItem","id","options","Object","assign","Settings","Defaults","_trigger","document","body","querySelector","Attribute","TRIGGER","_target","TARGET","_setA11yAttributes","this","groupedItem","_onTriggerClick","_triggerClickHandler","bind","addEventListener","evt","preventDefault","target","closest","toggle","elementId","setAttribute","isOpen","toString","_removeA11yAttributes","removeAttribute","close","open","classList","add","ClassName","TARGET_OPEN","TRIGGER_OPEN","remove","dispose","removeEventListener","initialize","element","triggerId","getAttribute","contains","ExpandableGroup","elements","_elements","_expandables","map","trigger","_onClick","_onClickHandler","includes","_toggleGroupVisibility","selectedId","forEach","expandable","item","Array","from","querySelectorAll","single","groups","groupIds","groupId","GROUP","push","filter","el","singleInstances","groupInstances","grouping","concat"],"mappings":"gMAAA,+BAEkB,4CACD,mDAGJ,iCACD,+BACD,gDAGM,wVCHXA,wBACQC,OAAIC,2EAETD,GAAKA,OAMLC,QAAUC,OAAOC,UAAWC,EAASC,SAAUJ,QAG/CK,SAAWC,SAASC,KAAKC,kBAAkBL,EAASM,UAAUC,aAAYX,aAG1EY,QAAUL,SAASC,KAAKC,kBAAkBL,EAASM,UAAUG,YAAWb,aAExEc,qBAEAC,KAAKd,QAAQe,mBACXC,gBAAkBF,KAAKG,qBAAqBC,KAAKJ,eAC7CP,KAAKY,iBAAiB,QAASL,KAAKE,qCASjDC,8BAAqBG,KACfC,iBACYD,EAAIE,OAAOC,YAAYpB,EAASM,UAAUC,eAE1CI,KAAKT,eACdmB,sBAQTX,kCACQY,gBAA0BX,KAAKf,QAEhCM,SAASqB,aAAa,mBAAoBD,QAC1Cd,QAAQe,aAAa,KAAMD,QAC3BpB,SAASqB,aAAa,gBAAiBZ,KAAKa,OAAOC,iBACnDvB,SAASqB,aAAa,gBAAiBD,QACvCd,QAAQe,aAAa,kBAAmBD,QACxCd,QAAQe,aAAa,gBAAiBZ,KAAKa,QAAQC,yBAO1DC,sCACOxB,SAASyB,gBAAgB,yBACzBnB,QAAQmB,gBAAgB,WACxBzB,SAASyB,gBAAgB,sBACzBnB,QAAQmB,gBAAgB,wBACxBnB,QAAQmB,gBAAgB,4BAM/BN,kBACMV,KAAKa,YACFI,aAEAC,oBAOTA,qBACOrB,QAAQsB,UAAUC,IAAI/B,EAASgC,UAAUC,kBACzC/B,SAAS4B,UAAUC,IAAI/B,EAASgC,UAAUE,mBAC1ChC,SAASqB,aAAa,gBAAiB,aACvCf,QAAQe,aAAa,cAAe,sBAM3CK,sBACOpB,QAAQsB,UAAUK,OAAOnC,EAASgC,UAAUC,kBAC5C/B,SAAS4B,UAAUK,OAAOnC,EAASgC,UAAUE,mBAC7ChC,SAASqB,aAAa,gBAAiB,cACvCf,QAAQe,aAAa,cAAe,qBAU3Ca,mBACOzB,KAAKd,QAAQe,sBACPR,KAAKiC,oBAAoB,QAAS1B,KAAKE,sBAG7Ca,2BAUAY,oBAAWC,OACVC,EAAYD,EAAQE,aAAazC,EAASM,UAAUC,gBAInD,IAAIZ,EAHM4C,EAAQE,aAAazC,EAASM,UAAUG,SAClC+B,6CAxBhB7B,KAAKH,QAAQsB,UAAUY,SAAS1C,EAASgC,UAAUC,sBA8B9DnC,OAAOC,OAAOJ,EAAgBK,GClI9B,IAGM2C,wBACQC,kBAELC,UAAYD,OAGZE,aAAeF,EAASG,IAAI,mBAAW,IAAIpD,EAC9CqD,EAAQP,aAAazC,EAASM,UAAUC,UACtCK,aAAa,WAGZqC,SAAWtC,KAAKuC,gBAAgBnC,KAAKJ,eACjCP,KAAKY,iBAAiB,QAASL,KAAKsC,6BAQ/CC,yBAAgBjC,KACVC,qBACEE,EAAUH,EAAIE,OAAOC,YAAYpB,EAASM,UAAUC,aAEtDI,KAAKkC,UAAUM,SAAS/B,SACrBgC,uBAAuBhC,EAAQqB,aAAazC,EAASM,UAAUC,uBASxE6C,gCAAuBC,QAChBP,aAAaQ,QAAQ,SAACC,GACrBA,EAAW3D,KAAOyD,IACThC,WAEAO,uBAUjBQ,4BACWhC,KAAKiC,oBAAoB,QAAS1B,KAAKE,sBAC3CiC,aAAaQ,QAAQ,mBAAQE,EAAKpB,eAUlCE,oBAAWM,UACT,IAAID,EAAgBC,SAI/B9C,OAAOC,OAAO4C,EAAiB3C,mBC/DxB,eACC4C,EAAWa,MAAMC,KAAKvD,SAASwD,qBAAqB3D,EAASM,UAAUC,cAEvEqD,KACAC,KACAC,OAEGR,QAAQ,SAACE,OACVO,EAAUP,EAAKf,aAAazC,EAASM,UAAU0D,OACjDD,EACED,EAASX,SAASY,OACbE,KAAKrB,EAASsB,OAAO,mBAAMC,EAAG1B,aAAazC,EAASM,UAAU0D,SAAWD,OACvEE,KAAKF,MAGTE,KAAKT,SAIVY,EACJR,EAAOb,IAAI,mBAAW,IAAIpD,EAAeqD,EAAQP,aAAazC,EAASM,UAAUC,YAC7E8D,EAAiBR,EAAOd,IAAI,mBAAY,IAAIJ,EAAgB2B,YAE3DF,EAAgBG,OAAOF"}