{"version":3,"file":"odo-expandable.min.js","sources":["../src/expandable-settings.js","../src/expandable-group.js","../src/expandable.js"],"sourcesContent":["export default {\n  ClassName: {\n    TRIGGER_OPEN: 'expandable__trigger--open',\n    TARGET_OPEN: 'expandable__target--open',\n  },\n  Attribute: {\n    TRIGGER: 'data-expandable-trigger',\n    TARGET: 'data-expandable-target',\n    GROUP: 'data-expandable-group',\n  },\n  Defaults: {\n    groupedItem: false,\n  },\n};\n","/**\n * @fileoverview\n *\n * @author Matt Zaso\n */\nimport Settings from './expandable-settings';\nimport Expandable from './expandable';\n\nclass ExpandableGroup {\n  constructor(elements) {\n    this._elements = elements;\n\n    this._expandables = elements.map((trigger) => {\n      return new Expandable(trigger.getAttribute(Settings.Attribute.TRIGGER), { groupedItem: true });\n    });\n\n    this._bindListeners();\n  }\n\n  /**\n   * Binds the listeners to the body to handle click events.\n   * @private\n   */\n  _bindListeners() {\n    this._onClick = this._onClickHandler.bind(this);\n    document.body.addEventListener('click', this._onClick);\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _onClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest !== null && this._elements.includes(closest)) {\n      this._toggleGroupVisibility(closest.getAttribute(Settings.Attribute.TRIGGER));\n    }\n  }\n\n  _toggleGroupVisibility(selectedId) {\n    this._expandables.forEach((expandable) => {\n      if (expandable.id === selectedId) {\n        expandable.toggle();\n      } else {\n        expandable.close();\n      }\n    });\n  }\n\n  /**\n   * Dispose this instance and its handlers.\n   */\n  dispose() {\n    document.body.removeEventListener('click', this._onTriggerClick);\n    this._expandables.forEach(item => item.dispose());\n  }\n}\n\nexport default ExpandableGroup;\n","/**\n * @fileoverview An basic, expandable component that has both a trigger\n * and a target to open.\n *\n * @author Matt Zaso\n */\nimport Settings from './expandable-settings';\nimport ExpandableGroup from './expandable-group';\n\nclass Expandable {\n  constructor(id, options = {}) {\n    /** @type {string} */\n    this.id = id;\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Settings.Defaults, options);\n\n    /** @type {Element} */\n    this._trigger = document.body.querySelector(`[${Settings.Attribute.TRIGGER}=\"${id}\"]`);\n\n    /** @type {Element} */\n    this._target = document.body.querySelector(`[${Settings.Attribute.TARGET}=\"${id}\"]`);\n\n    this._setARIAAttributes();\n\n    this._bindListeners();\n  }\n\n  /**\n   * Binds the listeners to the body to handle click events.\n   * @private\n   */\n  _bindListeners() {\n    if (!this.options.groupedItem) {\n      this._onTriggerClick = this._triggerClickHandler.bind(this);\n      document.body.addEventListener('click', this._onTriggerClick);\n    }\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _triggerClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest !== null && closest === this._trigger) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Sets the appropriate ARIA attributes for a11y.\n   * @private\n   */\n  _setARIAAttributes() {\n    const elementId = `expandable-${this.id}`;\n\n    this._trigger.setAttribute('aria-describedby', elementId);\n\n    this._target.setAttribute('id', elementId);\n    this._target.setAttribute('role', 'region');\n    this._target.setAttribute('aria-expanded', 'true');\n  }\n\n  /**\n   * Removes the ARIA attributes assigned on instantiation.\n   * @private\n   */\n  _removeARIAAttributes() {\n    this._trigger.removeAttribute('aria-describedby');\n    this._target.removeAttribute('id');\n    this._target.removeAttribute('role');\n    this._target.removeAttribute('aria-expanded');\n  }\n\n  /**\n   * Toggles the expandable's state (open/closed).\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Opens the expandable.\n   */\n  open() {\n    this._target.classList.add(Settings.ClassName.TARGET_OPEN);\n    this._trigger.classList.add(Settings.ClassName.TRIGGER_OPEN);\n    this._target.setAttribute('aria-expanded', 'true');\n  }\n\n  /**\n   * Closes the expandable.\n   */\n  close() {\n    this._target.classList.remove(Settings.ClassName.TARGET_OPEN);\n    this._trigger.classList.remove(Settings.ClassName.TRIGGER_OPEN);\n    this._target.setAttribute('aria-expanded', 'false');\n  }\n\n  get isOpen() {\n    return this._target.classList.contains(Settings.ClassName.TARGET_OPEN);\n  }\n\n  /**\n   * Dispose this instance and its handlers.\n   */\n  dispose() {\n    if (!this.options.groupedItem) {\n      document.body.removeEventListener('click', this._onTriggerClick);\n    }\n\n    this._removeARIAAttributes();\n  }\n\n  /**\n   * Instantiates all instances of the expandable.\n   * @public\n   */\n  static initializeAll() {\n    const elements = Array.from(document.querySelectorAll(`[${Settings.Attribute.TRIGGER}]`));\n\n    const single = [];\n    const groups = [];\n    const groupIds = [];\n\n    elements.forEach((item) => {\n      if (item.getAttribute(Settings.Attribute.GROUP)) {\n        const groupId = item.getAttribute(Settings.Attribute.GROUP);\n        if (groupIds.indexOf(groupId) < 0) {\n          groups.push(elements.filter((el => el.getAttribute(Settings.Attribute.GROUP) === groupId)));\n          groupIds.push(groupId);\n        }\n      } else {\n        single.push(item);\n      }\n    });\n\n    const singleInstances = single.map(trigger => new Expandable(trigger.getAttribute(Settings.Attribute.TRIGGER)));\n    const groupInstances = groups.map(grouping => new ExpandableGroup(grouping));\n\n    return singleInstances.concat(groupInstances);\n  }\n}\n\nObject.assign(Expandable, Settings);\n\nexport default Expandable;\n"],"names":["ExpandableGroup","elements","_elements","_expandables","map","trigger","Expandable","getAttribute","Settings","Attribute","TRIGGER","groupedItem","_bindListeners","_onClick","this","_onClickHandler","bind","body","addEventListener","evt","preventDefault","closest","target","includes","_toggleGroupVisibility","selectedId","forEach","expandable","id","toggle","close","dispose","removeEventListener","_onTriggerClick","item","options","Object","assign","Defaults","_trigger","document","querySelector","_target","TARGET","_setARIAAttributes","_triggerClickHandler","elementId","setAttribute","_removeARIAAttributes","removeAttribute","isOpen","open","classList","add","ClassName","TARGET_OPEN","TRIGGER_OPEN","remove","initializeAll","Array","from","querySelectorAll","single","groups","groupIds","GROUP","groupId","indexOf","push","filter","el","singleInstances","groupInstances","grouping","concat","contains"],"mappings":"yLAAA,+BAEkB,wCACD,+CAGJ,iCACD,+BACD,gDAGM,wVCHXA,wBACQC,kBACLC,UAAYD,OAEZE,aAAeF,EAASG,IAAI,SAACC,UACzB,IAAIC,EAAWD,EAAQE,aAAaC,EAASC,UAAUC,UAAYC,aAAa,WAGpFC,oCAOPA,+BACOC,SAAWC,KAAKC,gBAAgBC,KAAKF,eACjCG,KAAKC,iBAAiB,QAASJ,KAAKD,uBAQ/CE,yBAAgBI,KACVC,qBACEC,EAAUF,EAAIG,OAAOD,YAAYb,EAASC,UAAUC,aAE1C,OAAZW,GAAoBP,KAAKZ,UAAUqB,SAASF,SACzCG,uBAAuBH,EAAQd,aAAaC,EAASC,UAAUC,uBAIxEc,gCAAuBC,QAChBtB,aAAauB,QAAQ,SAACC,GACrBA,EAAWC,KAAOH,IACTI,WAEAC,uBAQjBC,4BACWd,KAAKe,oBAAoB,QAASlB,KAAKmB,sBAC3C9B,aAAauB,QAAQ,mBAAQQ,EAAKH,kBChDrCzB,wBACQsB,OAAIO,2EAETP,GAAKA,OAMLO,QAAUC,OAAOC,UAAW7B,EAAS8B,SAAUH,QAG/CI,SAAWC,SAASvB,KAAKwB,kBAAkBjC,EAASC,UAAUC,aAAYkB,aAG1Ec,QAAUF,SAASvB,KAAKwB,kBAAkBjC,EAASC,UAAUkC,YAAWf,aAExEgB,0BAEAhC,oCAOPA,0BACOE,KAAKqB,QAAQxB,mBACXsB,gBAAkBnB,KAAK+B,qBAAqB7B,KAAKF,eAC7CG,KAAKC,iBAAiB,QAASJ,KAAKmB,+BASjDY,8BAAqB1B,KACfC,qBACEC,EAAUF,EAAIG,OAAOD,YAAYb,EAASC,UAAUC,aAE1C,OAAZW,GAAoBA,IAAYP,KAAKyB,eAClCV,sBAQTe,kCACQE,gBAA0BhC,KAAKc,QAEhCW,SAASQ,aAAa,mBAAoBD,QAE1CJ,QAAQK,aAAa,KAAMD,QAC3BJ,QAAQK,aAAa,OAAQ,eAC7BL,QAAQK,aAAa,gBAAiB,qBAO7CC,sCACOT,SAASU,gBAAgB,yBACzBP,QAAQO,gBAAgB,WACxBP,QAAQO,gBAAgB,aACxBP,QAAQO,gBAAgB,8BAM/BpB,kBACMf,KAAKoC,YACFpB,aAEAqB,oBAOTA,qBACOT,QAAQU,UAAUC,IAAI7C,EAAS8C,UAAUC,kBACzChB,SAASa,UAAUC,IAAI7C,EAAS8C,UAAUE,mBAC1Cd,QAAQK,aAAa,gBAAiB,qBAM7CjB,sBACOY,QAAQU,UAAUK,OAAOjD,EAAS8C,UAAUC,kBAC5ChB,SAASa,UAAUK,OAAOjD,EAAS8C,UAAUE,mBAC7Cd,QAAQK,aAAa,gBAAiB,sBAU7ChB,mBACOjB,KAAKqB,QAAQxB,sBACPM,KAAKe,oBAAoB,QAASlB,KAAKmB,sBAG7Ce,2BAOAU,6BACCzD,EAAW0D,MAAMC,KAAKpB,SAASqB,qBAAqBrD,EAASC,UAAUC,cAEvEoD,KACAC,KACAC,OAEGtC,QAAQ,SAACQ,MACZA,EAAK3B,aAAaC,EAASC,UAAUwD,OAAQ,KACzCC,EAAUhC,EAAK3B,aAAaC,EAASC,UAAUwD,OACjDD,EAASG,QAAQD,GAAW,MACvBE,KAAKnE,EAASoE,OAAQ,mBAAMC,EAAG/D,aAAaC,EAASC,UAAUwD,SAAWC,OACxEE,KAAKF,WAGTE,KAAKlC,SAIVqC,EAAkBT,EAAO1D,IAAI,mBAAW,IAAIE,EAAWD,EAAQE,aAAaC,EAASC,UAAUC,YAC/F8D,EAAiBT,EAAO3D,IAAI,mBAAY,IAAIJ,EAAgByE,YAE3DF,EAAgBG,OAAOF,6CAxCvB1D,KAAK4B,QAAQU,UAAUuB,SAASnE,EAAS8C,UAAUC,6BA4C9DnB,OAAOC,OAAO/B,EAAYE"}