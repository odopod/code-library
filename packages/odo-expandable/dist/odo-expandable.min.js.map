{"version":3,"file":"odo-expandable.min.js","sources":["../src/settings.js","../src/expandable-group.js","../src/expandable.js"],"sourcesContent":["export default {\n  ClassName: {\n    TRIGGER_OPEN: 'odo-expandable__trigger--open',\n    TARGET_OPEN: 'odo-expandable__target--open',\n  },\n  Attribute: {\n    TRIGGER: 'data-expandable-trigger',\n    TARGET: 'data-expandable-target',\n    GROUP: 'data-expandable-group',\n  },\n  Defaults: {\n    groupedItem: false,\n  },\n};\n","/**\n * @fileoverview A wrapper for multiple Expandable elements that will\n * allow them to operate coherently in an accordion type fashion.\n *\n * @author Matt Zaso\n */\nimport Settings from './settings';\nimport Expandable from './expandable';\n\nclass ExpandableGroup {\n  constructor(elements) {\n    /** @type {Array.<!Element>} */\n    this._elements = elements;\n\n    /** @type {Array.<!Expandable>} */\n    this._expandables = elements.map(trigger => new Expandable(\n      trigger.getAttribute(Settings.Attribute.TRIGGER),\n      { groupedItem: true },\n    ));\n\n    this._onClick = this._onClickHandler.bind(this);\n    document.body.addEventListener('click', this._onClick);\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {MouseEvent} evt Event object.\n   * @private\n   */\n  _onClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (this._elements.includes(closest)) {\n      this._toggleGroupVisibility(closest.getAttribute(Settings.Attribute.TRIGGER));\n    }\n  }\n\n  /**\n   * Will iterate over all grouped items and toggle the selected one while collapsing all others.\n   * @param {number} selectedId The ID of the selected target to expand.\n   * @private\n   */\n  _toggleGroupVisibility(selectedId) {\n    this._expandables.forEach((expandable) => {\n      if (expandable.id === selectedId) {\n        expandable.toggle();\n      } else {\n        expandable.close();\n      }\n    });\n  }\n\n  /**\n   * Dispose this instance and its handlers. Will also dispose all child\n   * instances.\n   * @public\n   */\n  dispose() {\n    document.body.removeEventListener('click', this._onTriggerClick);\n    this._expandables.forEach(item => item.dispose());\n  }\n}\n\nexport default ExpandableGroup;\n","/**\n * @fileoverview An basic, expandable component that has both a trigger\n * and a target to open.\n *\n * @author Matt Zaso\n */\nimport Settings from './settings';\nimport ExpandableGroup from './expandable-group';\n\nclass Expandable {\n  constructor(id, options = {}) {\n    /** @type {string} */\n    this.id = id;\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Settings.Defaults, options);\n\n    /** @type {Element} */\n    this._trigger = document.body.querySelector(`[${Settings.Attribute.TRIGGER}=\"${id}\"]`);\n\n    /** @type {Element} */\n    this._target = document.body.querySelector(`[${Settings.Attribute.TARGET}=\"${id}\"]`);\n\n    this._setA11yAttributes();\n\n    if (!this.options.groupedItem) {\n      this._onTriggerClick = this._triggerClickHandler.bind(this);\n      document.body.addEventListener('click', this._onTriggerClick);\n    }\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _triggerClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest === this._trigger) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Sets the appropriate ARIA attributes for a11y.\n   * @private\n   */\n  _setA11yAttributes() {\n    const elementId = `expandable-${this.id}`;\n\n    this._trigger.setAttribute('aria-describedby', elementId);\n\n    this._target.setAttribute('id', elementId);\n    this._target.setAttribute('role', 'region');\n    this._target.setAttribute('aria-expanded', 'true');\n  }\n\n  /**\n   * Removes the ARIA attributes assigned on instantiation.\n   * @private\n   */\n  _removeA11yAttributes() {\n    this._trigger.removeAttribute('aria-describedby');\n    this._target.removeAttribute('id');\n    this._target.removeAttribute('role');\n    this._target.removeAttribute('aria-expanded');\n  }\n\n  /**\n   * Toggles the expandable's state (open/closed).\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Opens the expandable.\n   */\n  open() {\n    this._target.classList.add(Settings.ClassName.TARGET_OPEN);\n    this._trigger.classList.add(Settings.ClassName.TRIGGER_OPEN);\n    this._target.setAttribute('aria-expanded', 'true');\n  }\n\n  /**\n   * Closes the expandable.\n   */\n  close() {\n    this._target.classList.remove(Settings.ClassName.TARGET_OPEN);\n    this._trigger.classList.remove(Settings.ClassName.TRIGGER_OPEN);\n    this._target.setAttribute('aria-expanded', 'false');\n  }\n\n  get isOpen() {\n    return this._target.classList.contains(Settings.ClassName.TARGET_OPEN);\n  }\n\n  /**\n   * Dispose this instance and its handlers.\n   */\n  dispose() {\n    if (!this.options.groupedItem) {\n      document.body.removeEventListener('click', this._onTriggerClick);\n    }\n\n    this._removeA11yAttributes();\n  }\n\n  /**\n   * Instantiates all instances of the expandable. Groups are instantiated separate from\n   * Expandables and require different parameters. This helper chunks out and groups the\n   * grouped expandables before instantiating all of them.\n   *\n   * @return {Array.<Expandable, ExpandableGroup>} all instances of both types.\n   * @public\n   */\n  static initializeAll() {\n    const elements = Array.from(document.querySelectorAll(`[${Settings.Attribute.TRIGGER}]`));\n\n    const single = [];\n    const groups = [];\n    const groupIds = [];\n\n    elements.forEach((item) => {\n      const groupId = item.getAttribute(Settings.Attribute.GROUP);\n      if (groupId) {\n        if (groupIds.indexOf(groupId) < 0) {\n          groups.push(elements.filter(el => el.getAttribute(Settings.Attribute.GROUP) === groupId));\n          groupIds.push(groupId);\n        }\n      } else {\n        single.push(item);\n      }\n    });\n\n    const singleInstances =\n      single.map(trigger => new Expandable(trigger.getAttribute(Settings.Attribute.TRIGGER)));\n    const groupInstances = groups.map(grouping => new ExpandableGroup(grouping));\n\n    return singleInstances.concat(groupInstances);\n  }\n}\n\nObject.assign(Expandable, Settings);\n\nexport default Expandable;\n"],"names":["ExpandableGroup","elements","_elements","_expandables","map","Expandable","trigger","getAttribute","Settings","Attribute","TRIGGER","groupedItem","_onClick","this","_onClickHandler","bind","body","addEventListener","evt","preventDefault","closest","target","includes","_toggleGroupVisibility","selectedId","forEach","expandable","id","toggle","close","dispose","removeEventListener","_onTriggerClick","item","options","Object","assign","Defaults","_trigger","document","querySelector","_target","TARGET","_setA11yAttributes","_triggerClickHandler","elementId","setAttribute","_removeA11yAttributes","removeAttribute","isOpen","open","classList","add","ClassName","TARGET_OPEN","TRIGGER_OPEN","remove","initializeAll","Array","from","querySelectorAll","single","groups","groupIds","groupId","GROUP","indexOf","push","filter","el","singleInstances","groupInstances","grouping","concat","contains"],"mappings":"yLAAA,+BAEkB,4CACD,mDAGJ,iCACD,+BACD,gDAGM,wVCFXA,wBACQC,kBAELC,UAAYD,OAGZE,aAAeF,EAASG,IAAI,mBAAW,IAAIC,EAC9CC,EAAQC,aAAaC,EAASC,UAAUC,UACtCC,aAAa,WAGZC,SAAWC,KAAKC,gBAAgBC,KAAKF,eACjCG,KAAKC,iBAAiB,QAASJ,KAAKD,6BAQ/CE,yBAAgBI,KACVC,qBACEC,EAAUF,EAAIG,OAAOD,YAAYZ,EAASC,UAAUC,aAEtDG,KAAKX,UAAUoB,SAASF,SACrBG,uBAAuBH,EAAQb,aAAaC,EAASC,UAAUC,uBASxEa,gCAAuBC,QAChBrB,aAAasB,QAAQ,SAACC,GACrBA,EAAWC,KAAOH,IACTI,WAEAC,uBAUjBC,4BACWd,KAAKe,oBAAoB,QAASlB,KAAKmB,sBAC3C7B,aAAasB,QAAQ,mBAAQQ,EAAKH,kBCnDrCzB,wBACQsB,OAAIO,2EAETP,GAAKA,OAMLO,QAAUC,OAAOC,UAAW5B,EAAS6B,SAAUH,QAG/CI,SAAWC,SAASvB,KAAKwB,kBAAkBhC,EAASC,UAAUC,aAAYiB,aAG1Ec,QAAUF,SAASvB,KAAKwB,kBAAkBhC,EAASC,UAAUiC,YAAWf,aAExEgB,qBAEA9B,KAAKqB,QAAQvB,mBACXqB,gBAAkBnB,KAAK+B,qBAAqB7B,KAAKF,eAC7CG,KAAKC,iBAAiB,QAASJ,KAAKmB,qCASjDY,8BAAqB1B,KACfC,iBACYD,EAAIG,OAAOD,YAAYZ,EAASC,UAAUC,eAE1CG,KAAKyB,eACdV,sBAQTe,kCACQE,gBAA0BhC,KAAKc,QAEhCW,SAASQ,aAAa,mBAAoBD,QAE1CJ,QAAQK,aAAa,KAAMD,QAC3BJ,QAAQK,aAAa,OAAQ,eAC7BL,QAAQK,aAAa,gBAAiB,qBAO7CC,sCACOT,SAASU,gBAAgB,yBACzBP,QAAQO,gBAAgB,WACxBP,QAAQO,gBAAgB,aACxBP,QAAQO,gBAAgB,8BAM/BpB,kBACMf,KAAKoC,YACFpB,aAEAqB,oBAOTA,qBACOT,QAAQU,UAAUC,IAAI5C,EAAS6C,UAAUC,kBACzChB,SAASa,UAAUC,IAAI5C,EAAS6C,UAAUE,mBAC1Cd,QAAQK,aAAa,gBAAiB,qBAM7CjB,sBACOY,QAAQU,UAAUK,OAAOhD,EAAS6C,UAAUC,kBAC5ChB,SAASa,UAAUK,OAAOhD,EAAS6C,UAAUE,mBAC7Cd,QAAQK,aAAa,gBAAiB,sBAU7ChB,mBACOjB,KAAKqB,QAAQvB,sBACPK,KAAKe,oBAAoB,QAASlB,KAAKmB,sBAG7Ce,2BAWAU,6BACCxD,EAAWyD,MAAMC,KAAKpB,SAASqB,qBAAqBpD,EAASC,UAAUC,cAEvEmD,KACAC,KACAC,OAEGtC,QAAQ,SAACQ,OACV+B,EAAU/B,EAAK1B,aAAaC,EAASC,UAAUwD,OACjDD,EACED,EAASG,QAAQF,GAAW,MACvBG,KAAKlE,EAASmE,OAAO,mBAAMC,EAAG9D,aAAaC,EAASC,UAAUwD,SAAWD,OACvEG,KAAKH,MAGTG,KAAKlC,SAIVqC,EACJT,EAAOzD,IAAI,mBAAW,IAAIC,EAAWC,EAAQC,aAAaC,EAASC,UAAUC,YACzE6D,EAAiBT,EAAO1D,IAAI,mBAAY,IAAIJ,EAAgBwE,YAE3DF,EAAgBG,OAAOF,6CA7CvB1D,KAAK4B,QAAQU,UAAUuB,SAASlE,EAAS6C,UAAUC,6BAiD9DnB,OAAOC,OAAO/B,EAAYG"}