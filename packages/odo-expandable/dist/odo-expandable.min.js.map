{"version":3,"file":"odo-expandable.min.js","sources":["../src/settings.js","../src/expandable-item.js","../src/expandable-group.js","../src/expandable-accordion.js","../src/expandable.js"],"sourcesContent":["export default {\n  ClassName: {\n    TRIGGER_OPEN: 'odo-expandable__trigger--open',\n    TARGET_OPEN: 'odo-expandable__target--open',\n  },\n  Attribute: {\n    TRIGGER: 'data-expandable-trigger',\n    TARGET: 'data-expandable-target',\n    GROUP: 'data-expandable-group',\n    ANIMATED: 'data-expandable-animated',\n  },\n  Defaults: {\n    groupedItem: false,\n  },\n};\n","/**\n * @fileoverview An basic, expandable component that has both a trigger\n * and a target to open.\n *\n * @author Matt Zaso\n */\nimport Settings from './settings';\n\nclass ExpandableItem {\n  constructor(id, options = {}) {\n    /** @type {string} */\n    this.id = id;\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Settings.Defaults, options);\n\n    /** @type {Element} */\n    this.trigger = document.body.querySelector(`[${Settings.Attribute.TRIGGER}=\"${id}\"]`);\n\n    /** @type {Element} */\n    this.target = document.body.querySelector(`[${Settings.Attribute.TARGET}=\"${id}\"]`);\n\n    this._setA11yAttributes();\n\n    if (!this.options.groupedItem) {\n      this._onTriggerClick = this._triggerClickHandler.bind(this);\n      document.body.addEventListener('click', this._onTriggerClick);\n    }\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _triggerClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest === this.trigger) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Sets the appropriate ARIA attributes for a11y.\n   * @private\n   */\n  _setA11yAttributes() {\n    const elementId = `expandable-${this.id}`;\n\n    this.trigger.setAttribute('aria-describedby', elementId);\n    this.target.setAttribute('id', elementId);\n    this.trigger.setAttribute('aria-expanded', this.isOpen.toString());\n    this.trigger.setAttribute('aria-controls', elementId);\n    this.target.setAttribute('aria-labelledby', elementId);\n    this.target.setAttribute('aria-hidden', (!this.isOpen).toString());\n  }\n\n  /**\n   * Removes the ARIA attributes assigned on instantiation.\n   * @private\n   */\n  _removeA11yAttributes() {\n    this.trigger.removeAttribute('aria-describedby');\n    this.target.removeAttribute('id');\n    this.trigger.removeAttribute('aria-expanded');\n    this.target.removeAttribute('aria-labelledby');\n    this.target.removeAttribute('aria-hidden');\n  }\n\n  /**\n   * Toggles the expandable's state (open/closed).\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Opens the expandable.\n   */\n  open() {\n    this.target.classList.add(Settings.ClassName.TARGET_OPEN);\n    this.trigger.classList.add(Settings.ClassName.TRIGGER_OPEN);\n    this.trigger.setAttribute('aria-expanded', 'true');\n    this.target.setAttribute('aria-hidden', 'false');\n  }\n\n  /**\n   * Closes the expandable.\n   */\n  close() {\n    this.target.classList.remove(Settings.ClassName.TARGET_OPEN);\n    this.trigger.classList.remove(Settings.ClassName.TRIGGER_OPEN);\n    this.trigger.setAttribute('aria-expanded', 'false');\n    this.target.setAttribute('aria-hidden', 'true');\n  }\n\n  get isOpen() {\n    return this.target.classList.contains(Settings.ClassName.TARGET_OPEN);\n  }\n\n  /**\n   * Dispose this instance and its handlers.\n   */\n  dispose() {\n    if (!this.options.groupedItem) {\n      document.body.removeEventListener('click', this._onTriggerClick);\n    }\n\n    this._removeA11yAttributes();\n  }\n}\n\nObject.assign(ExpandableItem, Settings);\n\nexport default ExpandableItem;\n","/**\n * @fileoverview A wrapper for multiple Expandable elements that will\n * allow them to operate coherently in an accordion type fashion.\n *\n * @author Matt Zaso\n */\nimport Settings from './settings';\nimport ExpandableItem from './expandable-item';\n\nclass ExpandableGroup {\n  constructor(elements) {\n    /** @type {Array.<!Element>} */\n    this._elements = elements;\n\n    /**\n     * @type {Array.<!ExpandableItem>}\n     * @protected\n     */\n    this.expandables = elements.map(trigger => new ExpandableItem(\n      trigger.getAttribute(Settings.Attribute.TRIGGER),\n      { groupedItem: true },\n    ));\n\n    this._onClick = this._onClickHandler.bind(this);\n    document.body.addEventListener('click', this._onClick);\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {MouseEvent} evt Event object.\n   * @private\n   */\n  _onClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (this._elements.includes(closest)) {\n      this.toggleVisibility(closest.getAttribute(Settings.Attribute.TRIGGER));\n    }\n  }\n\n  /**\n   * Will iterate over all grouped items and toggle the selected one while collapsing all others.\n   * @param {number} selectedId The ID of the selected target to expand.\n   * @private\n   */\n  toggleVisibility(selectedId) {\n    this.expandables.forEach((expandable) => {\n      if (expandable.id === selectedId) {\n        expandable.toggle();\n      } else {\n        expandable.close();\n      }\n    });\n  }\n\n  /**\n   * Dispose this instance and its handlers. Will also dispose all child\n   * instances.\n   * @public\n   */\n  dispose() {\n    document.body.removeEventListener('click', this._onTriggerClick);\n    this.expandables.forEach(item => item.dispose());\n  }\n}\n\nObject.assign(ExpandableGroup, Settings);\n\nexport default ExpandableGroup;\n","/**\n * @fileoverview A subclass of ExpandableGroup which includes some additional\n * features like scrolling and collapsing animations.\n *\n * @author Matt Zaso\n */\nimport { scrollTo } from '@odopod/odo-helpers';\nimport OdoWindowEvents from '@odopod/odo-window-events';\nimport ExpandableGroup from './expandable-group';\n\nclass ExpandableAccordion extends ExpandableGroup {\n  constructor(elements) {\n    super(elements);\n\n    /**\n     * @type {{item: number, offset: number}} Object A map of the expandable offsets.\n     */\n    this._expandableOffsets = null;\n\n    this._saveOffsets();\n\n    // Set the initial value of each element based on its state.\n    this.expandables.forEach(item => this._setHeight(item, item.isOpen));\n\n    // A resize handler for when the DOM updates.\n    this._resizeId = OdoWindowEvents.onResize(this._handleResize.bind(this));\n  }\n\n  /**\n   * Called by OdoWindowEvents when the browser is resized. Allows us to update\n   * our saved offsets and animate to their new positions.\n   *\n   * @private\n   */\n  _handleResize() {\n    this._saveOffsets();\n    this.expandables.forEach(item => this._setHeight(item, item.isOpen));\n  }\n\n  /**\n   * When an item is clicked, we animate the accordion.\n   *\n   * @override\n   */\n  toggleVisibility(selectedId) {\n    this._scrollToSelected(selectedId);\n    this.expandables.forEach(item => this._animateHeight(item, item.id === selectedId));\n    super.toggleVisibility(selectedId);\n  }\n\n  /**\n   * On load and any other time the DOM updates, this function will save the offsets\n   * of each accordion item into an object so we don't have to read the DOM every time.\n   *\n   * @private\n   */\n  _saveOffsets() {\n    const scrollY = window.pageYOffset;\n    const containerOffset = scrollY + this.expandables[0].trigger.getBoundingClientRect().top;\n    this._expandableOffsets = this.expandables.map((el, i) => {\n      const offset = containerOffset + (i * el.target.firstElementChild.offsetHeight);\n      return { id: el.id, offset };\n    });\n  }\n\n  /**\n   * When called we will check the accordion's position in the viewport and scroll\n   * the user into view if needed.\n   *\n   * @param {number} targetId The id of the ExpandableItem that was clicked.\n   * @private\n   */\n  _scrollToSelected(targetId) {\n    const viewportTop = window.pageYOffset;\n    const viewportBottom = viewportTop + window.innerHeight;\n    const item = this._expandableOffsets.find(item => item.id === targetId);\n    const itemOffset = item.offset;\n    const isOutOfView = itemOffset < viewportTop || itemOffset > viewportBottom;\n    if (isOutOfView) {\n      scrollTo(itemOffset, 300);\n    }\n  }\n\n  /**\n   * Sets the height of a given Expandable item.\n   *\n   * @param {Expandable} expandable The Expandable instance to modify.\n   * @param {boolean} setToOpen Whether we setting the Expandable to it's open state.\n   */\n  _setHeight(expandable, setToOpen) {\n    const contentHeight = setToOpen ? expandable.target.firstElementChild.offsetHeight : 0;\n    expandable.target.style.height = `${contentHeight}px`;\n  }\n\n  /**\n   * Called if we need to alter the Expandable state. Only does so if either the same\n   * Expandable that is open is clicked or another one was clicked and this one needs\n   * to be closed.\n   *\n   * @param {Expandable} expandable The expandable to test and potentially alter.\n   * @param {boolean} isTarget Whether or not the current expandable was the one clicked.\n   */\n  _animateHeight(expandable, isTarget) {\n    if (isTarget || expandable.isOpen) {\n      this._setHeight(expandable, !expandable.isOpen);\n    }\n  }\n\n  /**\n   * Remove the resize handler and dispose.\n   *\n   * @override\n   */\n  dispose() {\n    super.dispose();\n    OdoWindowEvents.remove(this._resizeId);\n  }\n}\n\nexport default ExpandableAccordion;\n","import Settings from './settings';\nimport ExpandableGroup from './expandable-group';\nimport ExpandableItem from './expandable-item';\nimport ExpandableAccordion from './expandable-accordion';\n\n/**\n * Instantiates all instances of the expandable. Groups are instantiated separate from\n * Expandables and require different parameters. This helper chunks out and groups the\n * grouped expandables before instantiating all of them.\n *\n * @return {Array.<Expandable, ExpandableGroup>} all instances of both types.\n * @public\n */\nexport function initializeAll() {\n  const elements = Array.from(document.querySelectorAll(`[${Settings.Attribute.TRIGGER}]`));\n\n  const single = [];\n  const groups = [];\n  const groupIds = [];\n\n  elements.forEach((item) => {\n    const groupId = item.getAttribute(Settings.Attribute.GROUP);\n    if (groupId) {\n      if (!groupIds.includes(groupId)) {\n        groups.push(elements.filter(el => el.getAttribute(Settings.Attribute.GROUP) === groupId));\n        groupIds.push(groupId);\n      }\n    } else {\n      single.push(item);\n    }\n  });\n\n  const singleInstances =\n    single.map(trigger => new ExpandableItem(trigger.getAttribute(Settings.Attribute.TRIGGER)));\n  const groupInstances = groups.map((grouping) => {\n    if (grouping.some(item => item.hasAttribute(Settings.Attribute.ANIMATED))) {\n      return new ExpandableAccordion(grouping);\n    }\n    return new ExpandableGroup(grouping);\n  });\n\n  return singleInstances.concat(groupInstances);\n}\n\nexport { default as Settings } from './settings';\nexport { default as ExpandableItem } from './expandable-item';\nexport { default as ExpandableGroup } from './expandable-group';\nexport { default as ExpandableAccordion } from './expandable-accordion';\n"],"names":["ExpandableItem","id","options","Object","assign","Settings","Defaults","trigger","document","body","querySelector","Attribute","TRIGGER","target","TARGET","_setA11yAttributes","this","groupedItem","_onTriggerClick","_triggerClickHandler","bind","addEventListener","evt","preventDefault","closest","toggle","elementId","setAttribute","isOpen","toString","_removeA11yAttributes","removeAttribute","close","open","classList","add","ClassName","TARGET_OPEN","TRIGGER_OPEN","remove","dispose","removeEventListener","contains","ExpandableGroup","elements","_elements","expandables","map","getAttribute","_onClick","_onClickHandler","includes","toggleVisibility","selectedId","forEach","expandable","item","ExpandableAccordion","_ExpandableGroup","_expandableOffsets","_saveOffsets","_this","_setHeight","_resizeId","OdoWindowEvents","onResize","_handleResize","_this2","_scrollToSelected","_this3","_animateHeight","containerOffset","window","pageYOffset","getBoundingClientRect","top","el","i","offset","firstElementChild","offsetHeight","targetId","viewportTop","viewportBottom","innerHeight","itemOffset","find","setToOpen","contentHeight","style","height","isTarget","Array","from","querySelectorAll","single","groups","groupIds","groupId","GROUP","push","filter","singleInstances","groupInstances","grouping","some","hasAttribute","ANIMATED","concat"],"mappings":"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"}