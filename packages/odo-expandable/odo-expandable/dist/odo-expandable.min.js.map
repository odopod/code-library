{"version":3,"file":"odo-expandable.min.js","sources":["../src/expandable-settings.js","../src/expandable-group.js","../src/expandable.js"],"sourcesContent":["export default {\n  ClassName: {\n    TRIGGER_OPEN: 'expandable__trigger--open',\n    TARGET_OPEN: 'expandable__target--open',\n  },\n  Attribute: {\n    TRIGGER: 'data-expandable-trigger',\n    TARGET: 'data-expandable-target',\n    ID: 'data-expandable-id',\n    GROUP: 'data-expandable-group',\n  },\n  Defaults: {\n    groupedItem: false,\n  },\n};\n","/**\n * @fileoverview\n *\n * @author Matt Zaso\n */\nimport Settings from './expandable-settings';\nimport Expandable from './expandable';\n\nclass ExpandableGroup {\n  constructor(elements) {\n    this._elements = elements;\n\n    this._expandables = elements.map((trigger) => {\n      return new Expandable(trigger.getAttribute(Settings.Attribute.ID), { groupedItem: true });\n    });\n\n    this._bindListeners();\n  }\n\n  /**\n   * Binds the listeners to the body to handle click events.\n   * @private\n   */\n  _bindListeners() {\n    this._onClick = this._onClickHandler.bind(this);\n    document.body.addEventListener('click', this._onClick);\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _onClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest !== null && this._elements.includes(closest)) {\n      this._toggleGroupVisibility(closest.getAttribute(Settings.Attribute.ID));\n    }\n  }\n\n  _toggleGroupVisibility(selectedId) {\n    this._expandables.forEach((expandable) => {\n      if (expandable.id === selectedId) {\n        expandable.toggle();\n      } else {\n        expandable.close();\n      }\n    });\n  }\n\n  /**\n   * Dispose this instance and its handlers.\n   */\n  dispose() {\n    document.body.removeEventListener('click', this._onTriggerClick);\n    this._expandables.forEach(item => item.dispose());\n  }\n}\n\nexport default ExpandableGroup;\n","/**\n * @fileoverview An basic, expandable component that has both a trigger\n * and a target to open.\n *\n * @author Matt Zaso\n */\nimport Settings from './expandable-settings';\nimport ExpandableGroup from './expandable-group';\n\nclass Expandable {\n  constructor(id, options = {}) {\n    /** @type {string} */\n    this.id = id;\n\n    /**\n     * Override any defaults with the given options.\n     * @type {Object}\n     */\n    this.options = Object.assign({}, Settings.Defaults, options);\n\n    /** @type {Element} */\n    this._trigger = document.body.querySelector(`[${Settings.Attribute.TRIGGER}][${Settings.Attribute.ID}=\"${id}\"]`);\n\n    /** @type {Element} */\n    this._target = document.body.querySelector(`[${Settings.Attribute.TARGET}][${Settings.Attribute.ID}=\"${id}\"]`);\n\n    this._setARIAAttributes();\n\n    this._bindListeners();\n  }\n\n  /**\n   * Binds the listeners to the body to handle click events.\n   * @private\n   */\n  _bindListeners() {\n    if (!this.options.groupedItem) {\n      this._onTriggerClick = this._triggerClickHandler.bind(this);\n      document.body.addEventListener('click', this._onTriggerClick);\n    }\n  }\n\n  /**\n   * Handler for clicks on the trigger.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _triggerClickHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest !== null && closest === this._trigger) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Handler for key up events.\n   * @param {Event} evt Event object.\n   * @private\n   */\n  _onKeyUpHandler(evt) {\n    evt.preventDefault();\n    const closest = evt.target.closest(`[${Settings.Attribute.TRIGGER}]`);\n\n    if (closest !== null && closest === this._trigger && evt.keyCode === 32) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Sets the appropriate ARIA attributes for a11y.\n   * @private\n   */\n  _setARIAAttributes() {\n    const elementId = `expandable-${this.id}`;\n\n    this._trigger.setAttribute('aria-describedby', elementId);\n\n    this._target.setAttribute('id', elementId);\n    this._target.setAttribute('role', 'region');\n    this._target.setAttribute('aria-expanded', 'true');\n  }\n\n  /**\n   * Toggles the expandable's state (open/closed).\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Opens the expandable.\n   */\n  open() {\n    this._target.classList.add(Settings.ClassName.TARGET_OPEN);\n    this._trigger.classList.add(Settings.ClassName.TRIGGER_OPEN);\n    this._target.setAttribute('aria-expanded', 'false');\n  }\n\n  /**\n   * Closes the expandable.\n   */\n  close() {\n    this._target.classList.remove(Settings.ClassName.TARGET_OPEN);\n    this._trigger.classList.remove(Settings.ClassName.TRIGGER_OPEN);\n    this._target.setAttribute('aria-expanded', 'true');\n  }\n\n  get isOpen() {\n    return this._target.classList.contains(Settings.ClassName.TARGET_OPEN);\n  }\n\n  /**\n   * Dispose this instance and its handlers.\n   */\n  dispose() {\n    if (!this.options.groupedItem) {\n      document.body.removeEventListener('click', this._onTriggerClick);\n    }\n  }\n\n  /**\n   * Instantiates all instances of the expandable.\n   * @public\n   */\n  static initializeAll() {\n    const elements = Array.from(document.querySelectorAll(`[${Settings.Attribute.TRIGGER}]`));\n\n    const single = [];\n    const groups = [];\n    const groupIds = [];\n\n    elements.forEach((item) => {\n      if (item.getAttribute(Settings.Attribute.GROUP)) {\n        const groupId = item.getAttribute(Settings.Attribute.GROUP);\n        if (groupIds.indexOf(groupId) < 0) {\n          groups.push(elements.filter((el => el.getAttribute(Settings.Attribute.GROUP) === groupId)));\n          groupIds.push(groupId);\n        }\n      } else {\n        single.push(item);\n      }\n    });\n\n    const singleInstances = single.map(trigger => new Expandable(trigger.getAttribute(Settings.Attribute.ID)));\n    const groupInstances = groups.map(grouping => new ExpandableGroup(grouping));\n\n    return singleInstances.concat(groupInstances);\n  }\n}\n\nexport default Expandable;\n"],"names":["ExpandableGroup","elements","_elements","_expandables","map","trigger","Expandable","getAttribute","Settings","Attribute","ID","groupedItem","_bindListeners","_onClick","this","_onClickHandler","bind","body","addEventListener","evt","preventDefault","closest","target","TRIGGER","includes","_toggleGroupVisibility","selectedId","forEach","expandable","id","toggle","close","dispose","removeEventListener","_onTriggerClick","item","options","Object","assign","Defaults","_trigger","document","querySelector","_target","TARGET","_setARIAAttributes","_triggerClickHandler","_onKeyUpHandler","keyCode","elementId","setAttribute","isOpen","open","classList","add","ClassName","TARGET_OPEN","TRIGGER_OPEN","remove","initializeAll","Array","from","querySelectorAll","single","groups","groupIds","GROUP","groupId","indexOf","push","filter","el","singleInstances","groupInstances","grouping","concat","contains"],"mappings":"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"}