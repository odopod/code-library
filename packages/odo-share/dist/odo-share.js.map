{"version":3,"file":"odo-share.js","sources":["../src/services/facebook.js","../src/utils.js","../src/services/twitter.js","../src/services/googleplus.js","../src/services/tumblr.js","../src/services/linkedin.js","../src/services/email.js","../src/share.js"],"sourcesContent":["/**\n * Facebook\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - [u=window.location.href] - URL of the page to share\n *\n * @see {@link https://dev.twitter.com/web/tweet-button#properties}\n */\nexport default {\n  BASE: 'http://www.facebook.com/sharer.php',\n  params: {\n    u: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","/**\n * Implodes an array into a comma-separated list, or returns the input\n * if the input is not an array.\n *\n * @param {string|array} input - The string or array to implode.\n * @return {string}\n */\nexport function implode(input) {\n  if (typeof input !== 'string') {\n    input = input.join(); // eslint-disable-line no-param-reassign\n  }\n\n  return encodeURIComponent(input);\n}\n\n/**\n * Implodes an array or string as well as strips a token from\n * the string or each item in the array. This is uesful for removing hastags or\n * @'s.\n *\n * @param {string|array} input - The string or array to implode.\n * @param {string} stripToken - The token to strip.\n * @return {string}\n */\nexport function implodeAndStrip(input, stripToken) {\n  if (typeof input === 'string') {\n    input = input.replace(', ', ',').split(','); // eslint-disable-line no-param-reassign\n  }\n\n  input = input.map(item => item.replace(stripToken, '')).join(); // eslint-disable-line no-param-reassign\n\n  return encodeURIComponent(input);\n}\n","import { implodeAndStrip } from '../utils';\n\n/**\n * Twitter\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - [url=window.location.href] - URL of the page to share\n *  - via - Screen name of the user to attribute the\n *    Tweet to\n *  - text - Default Tweet text\n *  - related - Related accounts\n *  - [lang='en'] - The language for the Tweet Button\n *  - counturl - URL to which your shared URL resolves\n *  - hashtags - Comma separated hashtags appended to tweet text\n *\n * @see {@link https://dev.twitter.com/web/tweet-button#properties}\n */\nexport default {\n  BASE: 'https://twitter.com/intent/tweet',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n    via: {\n      friendly: 'via',\n      parse(input) {\n        return encodeURIComponent(input.replace('@', ''));\n      },\n    },\n    text: {\n      friendly: 'text',\n      parse: encodeURIComponent,\n    },\n    related: {\n      friendly: 'recommend',\n      parse(input) {\n        return implodeAndStrip(input, '@');\n      },\n    },\n    lang: {\n      friendly: 'language',\n      parse: encodeURIComponent,\n      default: 'en',\n    },\n    counturl: {\n      friendly: 'resolvesTo',\n      parse: encodeURIComponent,\n    },\n    hashtags: {\n      friendly: 'hashtags',\n      parse(input) {\n        return implodeAndStrip(input, '#');\n      },\n    },\n  },\n};\n","/**\n * Google Plus\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - url - URL of the page to share\n */\nexport default {\n  BASE: 'https://plus.google.com/share',\n  features: 'width=600,height=460,menubar=no,location=no,status=no',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","/**\n * Tumblr\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - to\n *  - cc\n *  - bcc\n *  - subject\n *  - body\n */\nexport default {\n  BASE: 'https://www.tumblr.com/widgets/share/tool',\n  params: {\n    url: {\n      friendly: 'url',\n      parse: encodeURI,\n      default: window.location.href,\n    },\n    title: {\n      friendly: 'title',\n      parse: encodeURI,\n      default: document.title,\n    },\n    description: {\n      friendly: 'description',\n      parse: encodeURI,\n    },\n  },\n};\n","/**\n * LinkedIn\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - mini\n *  - ro\n *  - title - Title of the page to share\n *  - url - URL of the page to share\n *\n * @see {@link https://www.linkedin.com/static?key=browser_bookmarklet}\n */\nexport default {\n  BASE: 'http://www.linkedin.com/shareArticle',\n  features: 'width=520,height=570,toolbar=0,location=0,status=0,scrollbars=yes',\n  params: {\n    mini: {\n      friendly: 'mini',\n      default: true,\n    },\n    ro: {\n      friendly: 'ro',\n      default: false,\n    },\n    title: {\n      friendly: 'title',\n      parse: encodeURIComponent,\n      default: document.title,\n    },\n    url: {\n      friendly: 'url',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","import { implode } from '../utils';\n\n/**\n * LinkedIn\n *\n * Sharing service configuration\n *\n * Supported parameters:\n *  - to\n *  - cc\n *  - bcc\n *  - subject\n *  - body\n */\nexport default {\n  BASE: 'mailto:',\n  params: {\n    to: {\n      friendly: 'to',\n      parse: implode,\n    },\n    cc: {\n      friendly: 'cc',\n      parse: implode,\n    },\n    bcc: {\n      friendly: 'bcc',\n      parse: implode,\n    },\n    subject: {\n      friendly: 'subject',\n      parse: encodeURIComponent,\n      default: document.title,\n    },\n    body: {\n      friendly: 'body',\n      parse: encodeURIComponent,\n      default: window.location.href,\n    },\n  },\n};\n","/**\n * Share component.\n *\n * @author Nathan Buchar <nathan.buchar@odopod.com>\n */\n\nimport * as services from './services';\n\n/**\n * The window name for all share windows spawned by Share\n */\nconst WINDOW_NAME = 'ShareWindow';\nconst noop = () => {};\n\nclass Share {\n  /**\n   * Prepares share components within the DOM.\n   *\n   * @constructor\n   */\n  constructor() {\n    this.ClassName = {\n      BASE: 'odo-share',\n    };\n\n    this.services = services;\n\n    // An array of share data objects. These objects may contain information\n    // regarding the root element, and beforeSend and afterSend functionality.\n    this.shares = [];\n\n    this._registerShareButtons();\n  }\n\n  /**\n   * This registers all Share components that are\n   * rendered to the DOM on page load. This will not prepare Share components\n   * that are added to the DOM dynamically. These must be registered using the\n   * public `add` method (@see add).\n   *\n   * @see _.add\n   */\n  _registerShareButtons() {\n    const selector = '.' + this.ClassName.BASE;\n    const shareElements = Array.from(document.querySelectorAll(selector));\n\n    // Pass an array of objects to the `add` method. These objects simply contain\n    // an `element` key that references the DOM element.\n    this.add(shareElements.map(element => ({ element })));\n  }\n\n  /**\n   * Normalize an option.\n   * @param {Object|Element} option Element or option object.\n   * @return {?Object}\n   */\n  _normalizeOption(option) {\n    if (option && option.nodeType === 1) {\n      // A DOM element was passed in.\n      return { element: option };\n    } else if (option && option.element) {\n      // A data object was passed in.\n      return option;\n    }\n\n    return null;\n  }\n\n  /**\n   * Normalize the options to an array of objects to add.\n   * @param {Element|Array|Object} options An array of option objects, an option\n   *     object, or an element.\n   * @return {Array.<Object>} An array of new share data.\n   */\n  _normalizeOptions(options) {\n    let items;\n\n    if (Array.isArray(options)) {\n      items = options.map(this._normalizeOption, this);\n    } else {\n      items = [this._normalizeOption(options)];\n    }\n\n    return items.filter(item => !!item);\n  }\n\n  /**\n   * Iterates through each element passed into the method, prepares it and\n   * pushes the completed data object to the `shares` array.\n   *\n   * @param {Element|Array|Object} options An array of option objects, an option\n   *     object, or an element.\n   */\n  add(options) {\n    const items = this._normalizeOptions(options);\n    const newShares = [];\n\n    items.forEach((data) => {\n      data.listener = (evt) => {\n        evt.preventDefault();\n        this.share(data);\n      };\n\n      data.element.addEventListener('click', data.listener);\n\n      this.shares.push(data);\n      newShares.push(data);\n    });\n\n    return newShares;\n  }\n\n  /**\n   * Performs the share operation. This will call the `before` method, reapply\n   * any modified input, open the window, then perform the `after` functionality.\n   *\n   * @param {object} input - The input data for the share as defined by the user.\n   * @param {object} outout - The output data for the share as generated by the\n   *   Share internals, such as the query  string, window properties, and\n   *   parsed paramaters.\n   * @param {object} service - The service configuration. @see ./services\n   */\n  _performShare(input, output, service) {\n    const transformedData = input.before.call(this, output);\n\n    const action = (arg) => {\n      let windowObject;\n      let options;\n      let parsedOptions = output;\n\n      // Reapply new data if applicable.\n      if (arg !== undefined && arg !== null) {\n        if (arg === false) {\n          return;\n        } else if ('data' in arg) {\n          options = Object.assign(input, arg);\n        } else {\n          options = Object.assign(input, { data: arg });\n        }\n\n        parsedOptions = Share._parseInput(options, service);\n      }\n\n      if (service === this.services.email) {\n        // Prevent opening empty window if sharing via email.\n        this._navigate(parsedOptions.url);\n      } else {\n        // Open the share window.\n        windowObject = this._open(parsedOptions.url, parsedOptions.name, service.Features);\n      }\n\n      // Call the `after` functionality.\n      input.after.call(this, parsedOptions, windowObject);\n    };\n\n    // Return a promise from the `before` method to do something async.\n    if (transformedData && transformedData.then) {\n      transformedData.then(action);\n    } else {\n      action(transformedData);\n    }\n  }\n\n  /**\n   * Gets the service configuration from the given string.\n   *\n   * @param {object} data - Share input data.\n   * @return {object|undefined} - The service configuration, or void if no service was\n   *   defined.\n   */\n  _getService(data) {\n    const service = data.service || (data.element && data.element.getAttribute('data-service'));\n\n    if (this.services[service]) {\n      return this.services[service];\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Parses the given input and exports the technical output based\n   * on the service schema. This includes items such as the query string, window\n   * data, and params.\n   *\n   * @param {object} input - Share input data.\n   * @param {object} service - The service configuration.\n   * @return {object} output - The parsed output.\n   * @see _parseparamsFromInput\n   * @see _getQueryString\n   * @see _constructWindowData\n   */\n  static _parseInput(input, service) {\n    const params = Share._parseParamsFromInput(input, service);\n    const queryString = Share._getQueryString(params);\n\n    return {\n      params,\n      queryString,\n      url: service.BASE + queryString,\n      name: WINDOW_NAME,\n    };\n  }\n\n  /**\n   * Parse the parameters from the given input and service schema. Defining a\n   * service schema allows us to always use \"url\" for all our share buttons,\n   * regardless of their service, as long as the proper key is defined in its\n   * respective parameter schema.\n   *\n   * If a parameter has a `parse` method within the object, this method will be\n   * called and will pass in the input value for that particular parameter. This\n   * allows us to customize how a parameter is parsed on a per-parameter and per-\n   * service basis without adding needless code within conditional blocks below.\n   *\n   * Order of priorities:\n   *   input value > `data` attributes (if applicable) > default > `void`\n   *\n   * @param {object} input - Share input data.\n   * @param {object} service - The service configuration.\n   * @return {object} obj - The parsed parameters.\n   */\n  static _parseParamsFromInput(input, service) {\n    const elementData = input.element ? input.element.dataset : {};\n    const data = input.data;\n    const obj = {};\n\n    // Iterate through each valid paramater for the given service.\n    Object.keys(service.params).forEach((param) => {\n      const config = service.params[param];\n      const friendly = config.friendly;\n      let value = null;\n\n      // Check if the parameter was defined when `share` was called.\n      if (friendly in data) {\n        value = data[friendly];\n      } else if (friendly in elementData) {\n        // Check if the parameter is defined as a data attribute on the element.\n        value = elementData[friendly];\n      } else if (config.default) {\n        // The param was not defined; Check for default values.\n        value = config.default;\n      }\n\n      if (value) {\n        // Parse the parameter and set its value.\n        obj[param] = (config.parse ? config.parse(value) : value).toString();\n      }\n    });\n\n    return obj;\n  }\n\n  /**\n   * Assembles the query string from an enumerated param object.\n   *\n   * For example { foo: 'bar', baz: 'qux' } => \"?foo=bar&baz=qux\"\n   *\n   * @param {object} data - Parameter data.\n   * @return {string} query - The finalized query string.\n   */\n  static _getQueryString(data) {\n    let base = '';\n\n    // The mailto: format requires the `to` to be first, before the `?`.\n    if (data.to) {\n      base = data.to;\n      delete data.to;\n    }\n\n    const pairs = Object.keys(data).map(param => `${param}=${data[param]}`);\n    return `${base}?${pairs.join('&')}`;\n  }\n\n  /* istanbul ignore next */\n  /**\n   * Opens a new browser window.\n   *\n   * @param {string} url - The URL to be loaded in the newly opened window.\n   * @param {string} windowName - A string name for the new window. The name\n   *   should not contain any whitespace characters. NOTE that windowName does not\n   *   specify the title of the new window. If a window with the same name already\n   *   exists, then the URL is loaded into the existing window.\n   * @return {object|null} - A reference to the newly created window. If the call\n   *   failed, it will be null. The reference can be used to access properties and\n   *   methods of the new window provided it complies with Same origin policy\n   *   security requirements.\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/open}\n   */\n  _open(url, windowName, windowFeatures = '') {\n    return window.open(url, windowName, windowFeatures);\n  }\n\n  /* istanbul ignore next */\n  /**\n   * Navigate to a new location within the same tab. This is used to open the\n   * user's default email app.\n   * @param {string} url mailto url.\n   */\n  _navigate(url) {\n    window.location.assign(url);\n  }\n\n  /**\n   * Initiate sharing. Extend the default options, fetch the service,\n   * parse the input, then perform the share.\n   *\n   * @example\n   *   Share.share({\n   *     service: 'twitter',\n   *     data: {\n   *       url: 'http://odopod.com/'\n   *       text: 'Check this out!',\n   *       via: 'Nurun',\n   *       hashtags: ['rad', 'odoshare']\n   *     }\n   *   });\n   *\n   * @param {object} options - Share options.\n   * @return {boolean} - Will return true if the share was successfull.\n   */\n  share(options) {\n    const opts = Object.assign({}, Share.Options, options);\n\n    // Fetch the service config from the string provided.\n    const service = this._getService(opts);\n\n    // The service could not be determined or was not defined; Exit early.\n    if (!service) {\n      return false;\n    }\n\n    // Parse the output (params, query string, etc) from the data provided.\n    const output = Share._parseInput(opts, service);\n\n    // Perform the share operation.\n    this._performShare(opts, output, service);\n\n    return true;\n  }\n\n  /**\n   * Disposes of all references and event listeners to the share\n   * button. To reverse this, you must call `.add` and pass in the element and\n   * options again.\n   *\n   * @param {Element} element - A reference to the share button's element.\n   * @return {number|undefined} - If a share button was disposed, this will return `1`,\n   *   (the length of the number of items disposed of), otherwise this will not\n   *   return.\n   */\n  dispose(element) {\n    for (let i = 0; i < this.shares.length; i++) {\n      const data = this.shares[i];\n      if (data.element === element) {\n        data.element.removeEventListener('click', data.listener);\n        return this.shares.splice(i, 1).length;\n      }\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * Default share input options. These may be overwritten by the user.\n */\nShare.Options = {\n  data: {},\n  before: noop,\n  after: noop,\n};\n\nexport default new Share();\n"],"names":["encodeURIComponent","window","location","href","implode","input","join","implodeAndStrip","stripToken","replace","split","map","item","encodeURI","document","title","WINDOW_NAME","noop","Share","ClassName","services","shares","_registerShareButtons","selector","BASE","shareElements","Array","from","querySelectorAll","add","element","_normalizeOption","option","nodeType","_normalizeOptions","options","items","isArray","filter","newShares","forEach","data","listener","evt","preventDefault","share","addEventListener","push","_performShare","output","service","transformedData","before","call","action","arg","windowObject","parsedOptions","undefined","Object","assign","_parseInput","email","_navigate","url","_open","name","Features","after","then","_getService","getAttribute","params","_parseParamsFromInput","queryString","_getQueryString","elementData","dataset","obj","keys","param","config","friendly","value","default","parse","toString","base","to","pairs","windowName","windowFeatures","open","opts","Options","dispose","i","length","removeEventListener","splice"],"mappings":"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"}